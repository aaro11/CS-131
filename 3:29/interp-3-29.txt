Macintosh /Users/todd/cs131 [9] -> ocaml
        Objective Caml version 3.11.1

# 34;;
- : int = 34
# let x = 34;;
val x : int = 34
# x;;
- : int = 34
# 34 + 54;;
- : int = 88
# 34.56;;
- : float = 34.56
# ^D        
Macintosh /Users/todd/cs131 [10] -> cd notes/
Macintosh.local:/Users/todd/cs131/notes
Macintosh /Users/todd/cs131/notes [11] -> ocaml
        Objective Caml version 3.11.1

# #use "notes-3-29.ml";;
val fact : int -> int = <fun>
# 1 + 2;;
- : int = 3
# 1.0 + 2.0;;
Error: This expression has type float but an expression was expected of type
         int
# 1.0 +. 2.0;;
- : float = 3.
# 1.2 + 3.4;;
Error: This expression has type float but an expression was expected of type
         int
# 1.2 +. 3.4;;
- : float = 4.6
# fact 5;;
- : int = 120
# fact 10;;
- : int = 3628800
# fact 15;;
- : int = -143173632
# #use "notes-3-29.ml";;
File "notes-3-29.ml", line 3, characters 2-27:
Warning P: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
1
val fact : int -> int = <fun>
val fact2 : int -> int = <fun>
# fact 1;;
Exception: Match_failure ("notes-3-29.ml", 3, 2).
# #use "notes-3-29.ml";;
File "notes-3-29.ml", line 6, characters 6-7:
Warning U: this match case is unused.
val fact : int -> int = <fun>
val fact2 : int -> int = <fun>
# [];;
- : 'a list = []
# [1;2;3];;
- : int list = [1; 2; 3]
# ["hi"; "bye"];;
- : string list = ["hi"; "bye"]
# let myList = [1;2;3];;
val myList : int list = [1; 2; 3]
# 4::myList;;
- : int list = [4; 1; 2; 3]
# myList;;
- : int list = [1; 2; 3]
# 1::2::3::[];;
- : int list = [1; 2; 3]
# "123";;
- : string = "123"
# myList;;
- : int list = [1; 2; 3]
# let x::xs = [1;2;3];;
Warning P: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
[]
val x : int = 1
val xs : int list = [2; 3]
# let y::ys = [4];;
Warning P: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
[]
val y : int = 4
val ys : int list = []
# let y::ys = [];;
Warning P: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
[]
Exception: Match_failure ("", 1, 4).
# #use "notes-3-29.ml";;
val fact : int -> int = <fun>
val fact2 : int -> int = <fun>
val sumList : int list -> int = <fun>
# sumList [1;2;3;4;5];;
- : int = 15
# #use "notes-3-29.ml";;
val fact : int -> int = <fun>
val fact2 : int -> int = <fun>
File "notes-3-29.ml", line 18, characters 15-32:
Error: This expression has type float but an expression was expected of type
         int
# #use "notes-3-29.ml";;
val fact : int -> int = <fun>
val fact2 : int -> int = <fun>
val sumList : float list -> float = <fun>
# [1;2;3]@[4;5;6];;
- : int list = [1; 2; 3; 4; 5; 6]
# #use "notes-3-29.ml";;
val fact : int -> int = <fun>
val fact2 : int -> int = <fun>
val sumList : int list -> int = <fun>
val concat : 'a list * 'a list -> 'a list = <fun>
# concat ([1;2;3], [4;5;6]);;
- : int list = [1; 2; 3; 4; 5; 6]
# concat (["hi"; "bye"], ["hello"]);;
- : string list = ["hi"; "bye"; "hello"]
# [(1, "hi"); (2, "bye")];;
- : (int * string) list = [(1, "hi"); (2, "bye")]
# (34);;
- : int = 34
# [[3;4]; [5;6]];;
- : int list list = [[3; 4]; [5; 6]]
# (43, "hi", 43.2, (1, 2), [4.5]);;
- : int * string * float * (int * int) * float list =
(43, "hi", 43.2, (1, 2), [4.5])
# [1;2;3;4];;
- : int list = [1; 2; 3; 4]
# #use "notes-3-29.ml";;  
val fact : int -> int = <fun>
val fact2 : int -> int = <fun>
val sumList : int list -> int = <fun>
val concat : 'a list * 'a list -> 'a list = <fun>
File "notes-3-29.ml", line 26, characters 2-80:
Warning P: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
_::[]
val sumConsecutive : int list -> int list = <fun>
# sumConsecutive [1;2;3;4];;
- : int list = [3; 7]
# sumConsecutive [1;2;3;4;5];;
Exception: Match_failure ("notes-3-29.ml", 26, 2).
# #use "notes-3-29.ml";;
val fact : int -> int = <fun>
val fact2 : int -> int = <fun>
val sumList : int list -> int = <fun>
val concat : 'a list * 'a list -> 'a list = <fun>
val sumConsecutive : int list -> int list = <fun>
# sumConsecutive [1;2;3;4;5];;
- : int list = [3; 7; 5]
# #use "notes-3-29.ml";;
val fact : int -> int = <fun>
val fact2 : int -> int = <fun>
val sumList : int list -> int = <fun>
val concat : 'a list * 'a list -> 'a list = <fun>
val sumConsecutive : int list -> int list = <fun>
val add : int * int -> int = <fun>
val three : unit -> int = <fun>
# three;;
- : unit -> int = <fun>
# three ();;
- : int = 3
# three();;
- : int = 3
# add(three(), 45);;
- : int = 48
# #use "notes-3-29.ml";;
File "notes-3-29.ml", line 40, characters 4-5:
Error: Syntax error
# #use "notes-3-29.ml";;
val fact : int -> int = <fun>
val fact2 : int -> int = <fun>
val sumList : int list -> int = <fun>
val concat : 'a list * 'a list -> 'a list = <fun>
val sumConsecutive : int list -> int list = <fun>
val add : int * int -> int = <fun>
val three : unit -> int = <fun>
File "notes-3-29.ml", line 39, characters 2-80:
Warning P: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
(_::_, [])
val zip : 'a list * 'b list -> ('a * 'b) list = <fun>
# zip ([1;2;3], ["hi"; "bye"; "hello"]);;
- : (int * string) list = [(1, "hi"); (2, "bye"); (3, "hello")]
# hd [1];;
Error: Unbound value hd
# List.hd [1];;
- : int = 1
# List.tl [1;2];;
- : int list = [2]
# List.hd [1;2;3];;
- : int = 1
# List.tl [1;2;3];;
- : int list = [2; 3]
# 1::(2::(3::[]));;
- : int list = [1; 2; 3]
# 
