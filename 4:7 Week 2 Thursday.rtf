{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww13420\viewh17100\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs24 \cf0 (* EXCEPTIONS IN ML *)\
(* a structured way to signal an error to the caller\
 - allows caller to deal with error \
 - can't confuse error with normal result\
\
# List.assoc;;\
- : 'a -> ('a * 'b) list -> 'b = <fun>\
-> cant just return -1 because of the type\
-> the right thing to do is return an error\
\
*)\
\
exception NotFound\
\
let rec assoc k assocL = \
	match assocL with\
		[] -> \
			raise NotFound\
		| (key, v)::rest ->\
			if key=k then v else assoc(key, rest)\
\
(* try e with exn1 -> e1 | \'85 | exnN -> eN *)\
\
let addBindingIfNotAlreadyThere k v assocL =\
	let currVal = assoc k assocL in\
		assocL\
	}