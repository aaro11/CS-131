{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww13400\viewh17100\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs24 \cf0 let square x = x * x\
\
# let y = 3;;\
val y : int = 3\
# square 4;;\
- : int = 16\
# let myOtherSquare = square;;\
val myOtherSquare : int -> int = <fun>\
# myOtherSquare 4;;\
- : int = 16\
\
let y = 4\
\
(* the above definition of square is shorthand for this *)\
let square2 = (function x -> x * x)\
\
(* in general: function expression (or lambda function or closure) \
	has the form\
	function p -> e *)\
\
val square 2 : int -> int = <fun>\
# square2 4;;\
- : int = 16\
# (function x -> x * x) 5;;\
- : int = 25\
\
(* YOU CAN PASS FUNCTIONS TO OTHER FUNCTIONS\
	A FUNCTION THAT TAKES ANOTHER FUNCTION AS AN ARG IS CALLED\
	A HIGHER-ORDER FUNCTION *)\
let twice (f, x) = f(f x)\
\
val twice : ('a -> 'a) * 'a -> 'a = <fun>\
# twice (square, 3);;\
- : int = 81\
# twice (function -> x * x , 3);;\
ERROR:...\
# twice ((function x -> x*x), 3);;\
- : int = 81\
\
(* BOOLEANS *)\
# twice ((function b -> if b then false else true), false);;\
- : bool = false\
\
(* BETTER TWICE *)\
let betterTwice f =\
	(function x -> f(f x))\
val betterTwice : ('a -> 'a) -> ('a -> 'a) = <fun>\
# let to The4thPower = betterTwice square;;\
val toThe4thPower : int -> int = <fun>\
# toThe4thPower 3;;\
- : int = 81\
# (betterTwice square) 3;;\
- : int = 81\
# betterTwice square 3;;\
- : int = 81\
\
let betterTwice2 =\
	(function f ->\
		(function x -> f(f x)))\
\
(* this stele of passing multiple arguments via functions that return functions\
	is called *CURRYING* *)\
\
(* SIMPLIFICATION OF ABOVE FUNCTION*)\
let betterTwice3 =\
	(fun f x -> f(f x))\
\
(* in general: fun p1 \'85 pn -> e\
	translates to: function p1 -> function p2 -> \'85 -> function pn -> e *)\
\
let betterTwice4 f x = f(f x)\
(* all betterTwice's are equivalent *)\
\
val betterTwice : ('a -> 'a) -> ('a -> 'a) = <fun>\
val betterTwice2 : ('a -> 'a) -> ('a -> 'a) = <fun>\
val betterTwice3 : ('a -> 'a) -> ('a -> 'a) = <fun>\
val betterTwice4 : ('a -> 'a) -> ('a -> 'a) = <fun>\
\
(* static scoping: you can pass functions around even if functions are out of scope\
	but it still refers to the nearest variable *) \
\
(* CONCAT WITH CURRYING *)\
let rec concat l1 l2=\
	match l1 with\
		[] -> l2\
	| x::xs -> x :: concat xs\
\
val concat : 'a list -> 'a list -> 'a list = <fun>\
# concat [1;2;3] [4;5;6];;\
- : int list = [1;2;3;4;5;6]\
# let concat123 = concat [1;2;3];;\
val concat123 : int list -> int list = <fun>\
# concat123 [4;5;6];;\
- : int list = [1; 2; 3; 4; 5; 6]\
# concat123 [7;8];;\
- : int list = [1; 2; 3; 7; 8]\
\
# betterTwice betterTwice;;\
- : ('_a -> '_a) -> '_a -> '_a = <fun>\
# betterTwice square 2;;\
- : int = 16\
# betterTwice betterTwice square 2;;\
- : int = 65536\
# let double x = x * 2;;\
val double : int -> int = <fun>\
# betterTwice double 2;;\
- : int = 8\
# betterTwice betterTwice double 2;;\
- : int 32\
# (((betterTwice betterTwice) betterTwice) double) 2;;\
- : int = 131072\
# [double; square];;\
- : (int -> int) list = [<fun>; <fun>]\
\
(* concat: 'a list -> 'a list -> 'a list\
	-> is right associated, so equivalent to\
\
	concat [1;2;3] [4;5;6]\
	function calling is left associative, so equivalent to\
\
let rec incLst l =\
	match l with\
		[] -> []\
	| x::xs -> (x+1)::(incLst xs)\
\
let rec swapLst l =\
	match l with\
		[] -> []\
	| (x, y)::rest -> (y,x)::(swapLst rest)\
\
val incLst : int list -> int list = <fun>\
val swapLst : ('a * 'b) list -> ('b * 'a) list = <fun>\
# incLst [1;2;3];;\
- : int list = [2;3;4]\
# swapLst [(1, "1")\
- : (string * int) list = [("1", 1); ("2", 2)]\
# List.map;;\
- : ('a -> 'b) -> 'a list -> 'b list = <fun>\
\
(* USING List.map; EQUIVALENT TO TWO ABOVE EQUATIONS *)\
let incLst2 l = List.map (function x -> x+1) l\
\
let swapLst2 l = List.map (function (x,y) -> (y,x)) l\
\
(* FUNCTION OF MAP *)\
let rec map f l = \
	match l with\
		[] -> []\
	| x::xs -> (f x)::(map f xs)\
\
# map (function x -> x+1) [1;2;3];;\
- : int list = [2;3;4]\
# let incLst = map (function x -> x+1)\
val incLst : int list -> int list = <fun>\
# \
\
(* making use of the fact that map is curried *)\
let incLst 3 = List.map (function x -> x+1)\
\
\
let expList exp lst =\
	map (function x -> x ** exp) lst\
\
(* LIST FILTER AND FOLD_RIGHT *)\
# List.filter;;\
- : ('a -> bool) -> 'a list -> 'a list = <fun>\
# List.filter (function x -> x > 3) [4;2;5;3;0];;\
- : int list = [4;5]\
# List.fold_right;;\
- : ('a -> 'b -> 'b) -> 'a list -> 'b -> 'b = <fun>\
\
(* List.fold_right f [x1;\'85;xn] b \
	computes this expression:\
	f(x1, f(x2, \'85 f(xn, b) \'85 ))\
\
let rec sumList l =\
	match l with\
		[] -> 0\
	| x::xs -> x + (sumList xs)\
\
(* EQUIVALENT TO *)\
let sumList2 l =\
	List.fold_right (fun x y -> x+y) l 0\
\
let rec fold_right f l b = \
	match l with\
		[] -> b\
	| x::xs -> f x (fold_right f xs b)\
\
# (+) 3 4;;\
- : int = 7\
# let incest l = fold_right (+) l 0;;\
val incLst : int list -> int = <fun>\
\
# ( * );;\
- : int -> int -> int = <fun>\
\
let concat l1 l2 =\
	List.fold_right (fun x l -> x::l) l1 l2 \
\
(* ::(x1, ::(x2, \'85 ::(xn, l2) \'85 ))\
	where l1 = [x1;x2;\'85;xn]\
*)\
\
(* dupList [1;2;3] returns [1;1;2;2;3;3] *) \
(* DUPLICATE A LIST *)\
let dupList l =\
	List.fold_right ( fun x rest -> x::x::rest ) l []\
\
(* LIST FOLD_LEFT *)\
# List.fold_left;;\
- : ('a -> 'b -> 'a) -> 'a -> 'b list -> 'a = <fun>\
(* List.fold_left f b l computes the expression\
	f(f(\'85(f(b, x1), x2), \'85), xn)\
\
# List.fold_left (+) 0 [1;2;3;4];;\
- : int = 10\
# List.fold_right (-) [1;2;3;4] 0;;\
- : int = -2\
# List.fold_left (-) 0 [1;2;3;4];;\
- : int = -10\
\
\
let maxList l =\
	List.fold_left (fun currMax elem -> if (currMax > elem) then currMax else elem)\
		0 l\
\
\
\
\
\
\
\
\
\
\
\
\
}